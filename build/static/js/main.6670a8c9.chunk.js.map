{"version":3,"sources":["components/header.js","components/map.js","components/list.js","components/Fetch.js","components/content.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Map","markers","addMarker","locations","window","google","infowindow","maps","InfoWindow","_loop","i","marker","Marker","position","lat","venue","location","lng","animation","Animation","DROP","map","title","id","addListener","contents","_this","props","setContens","setContent","open","setAnimation","BOUNCE","setTimeout","push","length","removeMarker","forEach","setMap","this","role","Component","List","_this$props","showInfo","query","inputChange","className","tabIndex","htmlFor","type","placeholder","value","onChange","e","target","aria-label","loc","key","onClick","name","initMap","document","getElementById","center","zoom","loadScript","scriptElement","mapScript","src","concat","async","defer","onerror","alert","createScript","firstScript","getElementsByTagName","parentNode","insertBefore","Contents","state","allLocations","address","infoClick","filterLocations","filter","toLowerCase","includes","setState","_this2","fetch","then","response","json","result","groups","items","catch","err","list_List","map_Map","App","Fetch","header","content_Contents","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNAUeA,EARA,WACX,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,gCCFSC,6MACjBC,QAAU,KACVC,UAAY,SAACC,GAENC,OAAOC,QAAO,WAEb,IADA,IAAIC,EAAa,IAAIF,OAAOC,OAAOE,KAAKC,WAD3BC,EAAA,SAELC,GACJ,IAAIC,EAAS,IAAIP,OAAOC,OAAOE,KAAKK,OAAO,CACvCC,SAAS,CACLC,IAAKX,EAAUO,GAAGK,MAAMC,SAASF,IACjCG,IAAKd,EAAUO,GAAGK,MAAMC,SAASC,KAErCC,UAAWd,OAAOC,OAAOE,KAAKY,UAAUC,KACxCC,IAAKjB,OAAOiB,IACZC,MAAOnB,EAAUO,GAAGK,MAAMQ,KAE9BZ,EAAOa,YAAY,QAAS,WACxB,IAAIC,EAAWC,EAAKC,MAAMC,WAAWzB,EAAUO,IAC/CJ,EAAWuB,WAAWJ,GACtBnB,EAAWwB,KAAK1B,OAAOiB,IAAKV,GAG5BA,EAAOoB,aAAa3B,OAAOC,OAAOE,KAAKY,UAAUa,QACjDC,WAAW,WACPtB,EAAOoB,aAAa,OACtB,OAENL,EAAKzB,QAAQiC,KAAKvB,IArBdD,EAAI,EAAGA,EAAIP,EAAUgC,OAAQzB,IAAID,EAAjCC,GAwBRN,OAAOE,WAAaA,EACpBF,OAAOH,QAAUyB,EAAKzB,QA3BT,MA+BrBmC,aAAe,WACXV,EAAKzB,QAAQoC,QAAQ,SAAA1B,GAAM,OAAIA,EAAO2B,OAAO,iFAM7C,OAFAC,KAAKH,eACLG,KAAKrC,UAAUqC,KAAKZ,MAAMxB,WAEtBN,EAAAC,EAAAC,cAAA,OAAKyC,KAAK,OAAOjB,GAAG,eA3CCkB,aCAZC,mLAER,IAAAC,EAC2CJ,KAAKZ,MAAhDxB,EADAwC,EACAxC,UAAWyC,EADXD,EACWC,SAAUC,EADrBF,EACqBE,MAAOC,EAD5BH,EAC4BG,YAEjC,OACIjD,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,QACflD,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,oBACXlD,EAAAC,EAAAC,cAAA,MAAIiD,SAAU,GAAd,iBACAnD,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,UACXlD,EAAAC,EAAAC,cAAA,KAAGgD,UAAU,2BACblD,EAAAC,EAAAC,cAAA,SAAOkD,QAAQ,eAAeF,UAAU,eAAxC,mBACAlD,EAAAC,EAAAC,cAAA,SAAOiD,SAAU,EAAGE,KAAK,OAAO3B,GAAG,eAAewB,UAAU,QAAQI,YAAY,uBAAuBC,MAAOP,EAAOQ,SAAU,SAAAC,GAAC,OAAIR,EAAYQ,EAAEC,OAAOH,WAE7JvD,EAAAC,EAAAC,cAAA,MAAIyD,aAAa,uBACZrD,EAAUkB,IAAI,SAAAoC,GAAG,OACd5D,EAAAC,EAAAC,cAAA,MACIgD,UAAU,iBACVC,SAAU,EACVR,KAAK,SACLkB,IAAKD,EAAI1C,MAAMQ,GACfoC,QAAS,WAAOf,EAASa,KACxBA,EAAI1C,MAAM6C,kBAtBLnB,aCKrBoB,EAAU,WACf,IAAIxC,EAAM,IAAIjB,OAAOC,OAAOE,KAAKP,IAAI8D,SAASC,eAAe,OAAQ,CACjEC,OAAQ,CAAClD,IAAK,SAAUG,IAAK,UAC7BgD,KAAM,KAEV7D,OAAOiB,IAAMA,GAaR6C,EAAa,WAClB,IAAIC,EAZgB,WACpB,IAAMC,EAAYN,SAAS/D,cAAc,UAQzC,OANAqE,EAAUC,IAAV,+CAAAC,OADY,0CACZ,qBACAF,EAAUG,OAAQ,EAClBH,EAAUI,OAAQ,EAClBJ,EAAUK,QAAU,WACnBC,MAAM,sCAEAN,EAGaO,GAEhBC,EADed,SAASe,qBAAqB,UAClB,GAC/BD,EAAYE,WAAWC,aAAaZ,EAAeS,GACnDxE,OAAOyD,QAAUA,GC1BJmB,6MACjBC,MAAQ,CACJ9E,UAAW,GACX+E,aAAc,GACdrC,MAAO,MASXjB,WAAa,SAACZ,GACV,0EAAAsD,OAGsCtD,EAASD,MAAM6C,KAHrD,2DAAAU,OAI0CtD,EAASD,MAAMC,SAASmE,QAJlE,6CAUJC,UAAY,SAACpE,GACT,IADsB,IAAAP,EAAA,SACdC,GACJ,GAAGM,EAASD,MAAMQ,KAAOnB,OAAOH,QAAQS,GAAGY,MAAM,CAC7C,IAAIG,EAAWC,EAAKE,WAAWZ,GAC/BZ,OAAOE,WAAWuB,WAAWJ,GAC7BrB,OAAOE,WAAWwB,KAAK1B,OAAOiB,IAAKjB,OAAOH,QAAQS,IAElDN,OAAOH,QAAQS,GAAGqB,aAAa3B,OAAOC,OAAOE,KAAKY,UAAUa,QACxDC,WAAW,WACP7B,OAAOH,QAAQS,GAAGqB,aAAa,OACjC,OATNrB,EAAI,EAAGA,EAAIN,OAAOH,QAAQkC,OAAQzB,IAAID,EAAtCC,MAcZ2E,gBAAkB,SAACxC,EAAO1C,GACtB,OACIA,EAAUmF,OAAO,SAAAtE,GAAQ,OAAIA,EAASD,MAAM6C,KAAK2B,cAAcC,SAAS3C,EAAM0C,oBAItFzC,YAAc,SAACD,GACXnB,EAAK+D,SAAS,CAAC5C,UACZA,EACCnB,EAAK+D,SAAS,CACVtF,UAAWuB,EAAK2D,gBAAgBxC,EAAOnB,EAAKuD,MAAM9E,aAItDuB,EAAK+D,SAAS,CACVtF,UAAWuB,EAAKuD,MAAMC,mGA/Cf,IAAAQ,EAAAnD,KDTnBoD,MAHgB,8MAIXC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAM,OAAIA,EAAOF,SAASG,OAAO,GAAGC,QACzCC,MAAM,SAAAC,GAAG,OAAIzB,MAAK,wCAAAJ,OAAyC6B,MCQ3DP,KAAK,SAAAzF,GAAS,OAAIuF,EAAKD,SAAS,CAACtF,YAAW+E,aAAc/E,uCAmD3D,OACIN,EAAAC,EAAAC,cAAA,OAAKyC,KAAK,OAAOO,UAAU,aACvBlD,EAAAC,EAAAC,cAACqG,EAAD,CACIjG,UAAWoC,KAAK0C,MAAM9E,UACtB2C,YAAaP,KAAKO,YAClBF,SAAUL,KAAK6C,UACfvC,MAAON,KAAK0C,MAAMpC,QAEtBhD,EAAAC,EAAAC,cAACsG,EAAD,CACIlG,UAAWoC,KAAK0C,MAAM9E,UACtByB,WAAYW,KAAKX,qBAtECa,aCcvB6D,0LATX,OADAC,IAEE1G,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,OACblD,EAAAC,EAAAC,cAACyG,EAAD,MACA3G,EAAAC,EAAAC,cAAC0G,EAAD,cAPUhE,cCMZiE,EAAcC,QACW,cAA7BvG,OAAOY,SAAS4F,UAEe,UAA7BxG,OAAOY,SAAS4F,UAEhBxG,OAAOY,SAAS4F,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnB,KAAK,SAAAwB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,gHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BlB,MAAM,SAAA4B,GACLJ,QAAQI,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOnI,EAAAC,EAAAC,cAACkI,EAAD,MAASnE,SAASC,eAAe,SDgB1C,SAAkBiD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwB/H,OAAOY,SAASoH,MACpDC,SAAWjI,OAAOY,SAASqH,OAIvC,OAGFjI,OAAOkI,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAzC,OAAM6D,GAAN,sBAEPzB,GAgEV,SAAiCK,EAAOC,GAEtCrB,MAAMoB,GACHnB,KAAK,SAAAC,GAEJ,IAAM0C,EAAc1C,EAAS2C,QAAQC,IAAI,gBAEnB,MAApB5C,EAAS6C,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMhD,KAAK,SAAAwB,GACjCA,EAAayB,aAAajD,KAAK,WAC7BxF,OAAOY,SAAS8H,aAKpBhC,EAAgBC,EAAOC,KAG1Bd,MAAM,WACLwB,QAAQC,IACN,mEArFAoB,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMhD,KAAK,WACjC8B,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.6670a8c9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () =>{\r\n    return (\r\n        <header>\r\n            <h1>Neighborhood Map</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Map extends Component{\r\n    markers = [];\r\n    addMarker = (locations) =>{\r\n        // checking google as window object\r\n        if(window.google){\r\n            let infowindow = new window.google.maps.InfoWindow();\r\n            for(let i = 0; i < locations.length; i++){\r\n                let marker = new window.google.maps.Marker({\r\n                    position:{\r\n                        lat: locations[i].venue.location.lat,\r\n                        lng: locations[i].venue.location.lng\r\n                    },\r\n                    animation: window.google.maps.Animation.DROP,\r\n                    map: window.map,\r\n                    title: locations[i].venue.id\r\n                });\r\n                marker.addListener('click', () =>{\r\n                    let contents = this.props.setContens(locations[i]);\r\n                    infowindow.setContent(contents);\r\n                    infowindow.open(window.map, marker);\r\n\r\n                    //animate marker on click\r\n                    marker.setAnimation(window.google.maps.Animation.BOUNCE)\r\n                    setTimeout(function(){\r\n                        marker.setAnimation(null)\r\n                    },500)\r\n                });\r\n                this.markers.push(marker)\r\n            }\r\n            // making infowindow and markers as a window object, so that we can use this in parent component\r\n            window.infowindow = infowindow;\r\n            window.markers = this.markers; \r\n        }\r\n    };\r\n\r\n    removeMarker = () => {\r\n        this.markers.forEach(marker => marker.setMap(null))\r\n    }\r\n\r\n    render(){\r\n        this.removeMarker()\r\n        this.addMarker(this.props.locations)\r\n        return(\r\n            <div role=\"main\" id=\"map\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nMap.propTypes = {\r\n    locations: PropTypes.array.isRequired,\r\n    setContens: PropTypes.func.isRequired\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class List extends Component{\r\n\r\n    render() {\r\n        let {locations, showInfo, query, inputChange} = this.props;\r\n\r\n        return(\r\n            <div className=\"List\">\r\n            <div className='side-drawer open'>\r\n                <h4 tabIndex={0}>Nearby Places</h4>\r\n                <div className=\"filter\">\r\n                    <i className=\"fas fa-search-location\"></i>\r\n                    <label htmlFor=\"filter-input\" className=\"search-accs\">Search Location</label>\r\n                    <input tabIndex={0} type=\"text\" id=\"filter-input\" className=\"query\" placeholder=\"Search Nearby Places\" value={query} onChange={e => inputChange(e.target.value)}/>\r\n                </div>\r\n                <ol aria-label = 'List of Restaurants'>\r\n                    {locations.map(loc =>(\r\n                        <li \r\n                            className=\"listItem title\" \r\n                            tabIndex={0}\r\n                            role=\"button\"\r\n                            key={loc.venue.id}\r\n                            onClick={() => {showInfo(loc)}}>\r\n                            {loc.venue.name}\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n};\r\n\r\nList.propTypes = {\r\n    locations: PropTypes.array.isRequired,\r\n    inputChange: PropTypes.func.isRequired,\r\n    showInfo: PropTypes.func.isRequired,\r\n    query: PropTypes.string.isRequired\r\n}","const foursquare_Api = `https://api.foursquare.com/v2/venues/explore?visit=places&near=jaipur&client_id=ZGHPEJVLV3MDALTJVNB2MOFFC1TWT5MXDPTFQTTCEIKOHD1S&client_secret=XQJFWPIW1Y5CRUZZ3N2NY4LTHXQVR31WFLX24RAWNDDHLR3Z&v=20181122`;\r\n\r\nexport const getLocationDetails = () => \r\n    fetch(foursquare_Api)\r\n        .then(response => response.json())\r\n        .then(result => result.response.groups[0].items)\r\n        .catch(err => alert(`Foursquare Api faild to load! Error: ${err}`));\r\n\r\nexport const initMap = () => {\r\n        let map = new window.google.maps.Map(document.getElementById('map'), {\r\n            center: {lat: 26.91962, lng: 75.78781},//jaipur coordinates\r\n            zoom: 14\r\n        });\r\n        window.map = map; // making map window object rather than passing this an prop\r\n    }\r\nexport const createScript = () => {\r\n        const mapScript = document.createElement(\"script\");\r\n        const API = \"AIzaSyBtsirN68OAeo4fv8o0iEOZ5dJlEAHLUxA\";\r\n        mapScript.src= `https://maps.googleapis.com/maps/api/js?key=${API}&callback=initMap`;\r\n        mapScript.async = true;\r\n        mapScript.defer = true;\r\n        mapScript.onerror = function () {\r\n         alert('Google maps faild to load, Error!');\r\n        };\r\n        return mapScript;\r\n    }    \r\nexport const loadScript = () => {\r\n        let scriptElement = createScript();\r\n        let scriptOfPage = document.getElementsByTagName(\"script\");\r\n        let firstScript = scriptOfPage[0];\r\n        firstScript.parentNode.insertBefore(scriptElement, firstScript);\r\n        window.initMap = initMap;//make initMap function for window object\r\n    } //loadScript fetch the data From foursquare_Api & Google Map Api and this is call on App.js Line no 10\r\n","import React, { Component } from 'react';\r\nimport Map from './map';\r\nimport List from './list';\r\nimport * as Fetch from './Fetch';\r\n\r\nexport default class Contents extends Component{\r\n    state = {\r\n        locations: [],\r\n        allLocations: [],\r\n        query: \"\"\r\n    }\r\n\r\n    componentDidMount(){\r\n        Fetch.getLocationDetails()\r\n        .then(locations => this.setState({locations, allLocations: locations}))\r\n    }\r\n\r\n    // set content for InfoWindow\r\n    setContens = (location) =>{\r\n        return(\r\n            `\r\n            <div>\r\n                <h3 className=\"title\">Name: ${location.venue.name}</h3>\r\n                <p className=\"address\">Address: ${location.venue.location.address}</p>\r\n            </div>\r\n            `\r\n        )\r\n    }\r\n\r\n    infoClick = (location) => {\r\n        for(let i = 0; i < window.markers.length; i++){\r\n            if(location.venue.id === window.markers[i].title){\r\n                let contents = this.setContens(location);\r\n                window.infowindow.setContent(contents)\r\n                window.infowindow.open(window.map, window.markers[i])\r\n\r\n                window.markers[i].setAnimation(window.google.maps.Animation.BOUNCE)\r\n                    setTimeout(function(){\r\n                        window.markers[i].setAnimation(null)\r\n                    },1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    filterLocations = (query, locations) => {\r\n        return(\r\n            locations.filter(location => location.venue.name.toLowerCase().includes(query.toLowerCase()))\r\n        )\r\n    }\r\n\r\n    inputChange = (query) => {\r\n        this.setState({query});\r\n        if(query){\r\n            this.setState({\r\n                locations: this.filterLocations(query, this.state.locations)\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                locations: this.state.allLocations\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div role=\"main\" className=\"container\">\r\n                <List \r\n                    locations={this.state.locations}\r\n                    inputChange={this.inputChange}\r\n                    showInfo={this.infoClick}\r\n                    query={this.state.query}\r\n                />\r\n                <Map \r\n                    locations={this.state.locations}\r\n                    setContens={this.setContens}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport Header from './components/header';\r\nimport Contents from './components/content';\r\nimport * as Fetch from './components/Fetch';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    Fetch.loadScript();// To Fetch The APIs (Google MAP & FourSquare Api)\r\n    return (\r\n      <div className=\"App\">\r\n        <Header/>\r\n        <Contents />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}